let g:ale_completion_enabled = 1

" Plugin manager
so ~/.vim/plugins.vim

" Row numbers
set number
set numberwidth=5
set relativenumber
highlight LineNr cterm=NONE ctermbg=NONE ctermfg=grey

" Text columns
set textwidth=80
set colorcolumn=+1,+21,+41

" Splits are open in 'natural' reading direction (right then below)
set splitright
set splitbelow

" Highlight cursor line
set cursorline
highlight CursorLine cterm=NONE ctermbg=lightcyan ctermfg=NONE
highlight CursorLineNR cterm=bold ctermbg=lightcyan ctermfg=darkblue

" Highlight and incremental search
if has("extra_search")
  set hlsearch
  set incsearch
endif
highlight Search cterm=NONE ctermbg=lightgreen ctermfg=NONE

" Search ignores case, unless specified
set ignorecase
set smartcase

" Assures that Backspace deletes indent, eol and start
set backspace=indent,eol,start

" Extra whitespace
set list listchars=tab:»\ ,eol:¬,trail:·,nbsp:·
" http://vim.wikia.com/wiki/Highlight_unwanted_spaces
highlight ExtraWhitespace cterm=bold ctermbg=red ctermfg=NONE
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

" Soft tabs (spaces instead of tab characters)
set tabstop=2
set shiftwidth=2
set shiftround
set expandtab

" Syntax
syntax on
syntax enable

set nocompatible
filetype plugin indent on
set omnifunc=syntaxcomplete#Complete

" Clipboard (yank/paste from/to clipboard, if available)
if has("clipboard")
  set clipboard=unnamed
  if has("unnamedplus")
    set clipboard+=unnamedplus
  endif
endif

set guioptions+=a

" Persistent undo
if has('persistent_undo')
  set undodir=~/.vim/.undo//
  set undofile
endif

" Backup and swap files on ~/.vim folder
set backup
set backupdir=~/.vim/.backup//
set directory=~/.vim/.swap//

" Netrw

" No header (banner)
let g:netrw_banner = 0

" Open files in a vertical split
" let g:netrw_browse_split = 2
let g:netrw_altv = 1

" netrw tree mode
let g:netrw_liststyle = 3

" ctrlp lists files based on .gitignore
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']

" Show vim mode on last line
set showmode

" Statusbar/Tabline
set showtabline=2
set laststatus=2
set ruler

" No vertical characters for separating windows
set fillchars+=vert:\ 

" Do not automatically insert comment leader after hitting o/O (normal mode)
autocmd FileType * setlocal formatoptions-=o

" Theme
let g:seoul256_background = 237
let g:seoul256_light_background = 256
colorscheme seoul256-light

" fzf colors that match the colorscheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" Map leader
let mapleader = " "

" FZF mappings
nnoremap <leader>ff :Files<cr>
nnoremap <leader>fgc :Commits<cr>
nnoremap <leader>fgbc :BCommits<cr>
nnoremap <leader>fgf :GFiles<cr>
nnoremap <leader>fgs :GFiles?<cr>
nnoremap <leader>fb :Buffers<cr>
nnoremap <leader>fl :Lines<cr>
nnoremap <leader>fbl :BLines<cr>
nnoremap <leader>rg :Rg<cr>
