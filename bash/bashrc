#!/bin/bash

# Bash Run Command script for custom prompt

# Prompt style related constants
declare -r PROMPT_STYLE="\[\e[36m\]"
declare -r CLEAR_STYLE="\[\e[0m\]"

git_commit_id() {
  local commit_id=$(git rev-parse --short HEAD 2> /dev/null)
  if [[ -n "${commit_id}" ]]; then
    echo "${commit_id}"
  fi
}

ruby_info() {
  local current_directory="$(pwd)"
  local is_ruby_project_dir=false

  while [[ "${current_directory}" != "/" ]]; do
    if [ -f "${current_directory}/.ruby-version" ]; then
      is_ruby_project_dir=true
      break
    fi

    current_directory="$(dirname "$current_directory")"
  done

  if [[ "${is_ruby_project_dir}" = true ]]; then
    local ruby_text='ruby'

    if [[ -n "$(command -v ruby)" ]]; then
      ruby_text="$(ruby --version | grep -oP "(ruby (\.?\d+){1,3})")"
    fi

    echo "«${ruby_text}»"
  fi
}

full_git_directory() {
  local git_dir=$(git rev-parse --show-toplevel 2> /dev/null)

  if [[ -n "${git_dir}" ]]; then
    echo "${git_dir}"
  fi
}

git_base_directory() {
  local full_git_dir=$(full_git_directory)

  if [[ -n "${full_git_dir}" ]]; then
    local git_base_dir="$(basename ${full_git_dir})"
    echo "${git_base_dir}" #| awk '{print toupper($0)}'
  fi
}

git_subdirectory() {
  local full_git_dir="$(full_git_directory)"

  if [[ -n "${full_git_dir}" ]]; then
    local current_dir="$(pwd)"
    local git_subdir="${current_dir/$full_git_dir/''}"

    if [[ -n "${git_subdir}" ]]; then
      echo "${git_subdir:1}"
    fi
  fi
}

upper_prompt() {
  local dir_style="\e[46;97m"
  local clear_style="\e[0m"
  local prompt="${dir_style} $(dirs) ${clear_style}"

  local git_base_dir="$(git_base_directory)"

  if [[ -n "${git_base_dir}" ]]; then
    local git_dir_style="\e[101;97m"
    local git_dir_slice="${git_dir_style} ${git_base_dir} ${clear_style}"

    local git_subdir_style="\e[46;97m"
    local git_subdir
    git_subdir="$(git_subdirectory)"
    if [[ -z "${git_subdir}" ]]; then git_subdir="~"; fi
    local git_subdir_slice="${git_subdir_style} ${git_subdir} ${clear_style}"

    local git_commit_style="\e[43;97m"
    local git_commit
    git_commit="$(git_commit_id)"
    if [[ -z "${git_commit}" ]]; then git_commit="--"; fi
    local git_commit_slice="${git_commit_style} ${git_commit} ${clear_style}"

    prompt="${git_dir_slice}${git_subdir_slice}${git_commit_slice}"
  fi

  echo -e "${prompt}\e[0m"
}

# Source global definitions
if [ -f /etc/bashrc ]; then
  source /etc/bashrc
fi

# Source machine-specific configuration
if [ -f "${HOME}/.bashrc.local" ]; then
  source "${HOME}/.bashrc.local"
fi

# Get bash aliases from file if there is one
if [ -f "${HOME}/.bash_aliases" ]; then
  source "${HOME}/.bash_aliases"
fi

# Define vim/vi as the default editor, if available
if [[ -n "$(command -v vimx)" ]]; then
  export EDITOR=vimx
elif [[ -n "$(command -v vim)" ]]; then
  export EDITOR=vim
elif [[ -n "$(command -v vi)" ]]; then
  export EDITOR=vi
fi

# Export options for __git_ps1 command
export GIT_PS1_SHOWDIRTYSTATE=true
export GIT_PS1_SHOWUNTRACKEDFILES=true
export GIT_PS1_SHOWSTASHSTATE=true
export GIT_PS1_SHOWCOLORHINTS=true
export GIT_PS1_SHOWUPSTREAM="auto"
export GIT_PS1_DESCRIBE_STYLE="branch"
source "${HOME}/.git-prompt.sh"

# Bash prompt (PS1)
UPPER_LINE="\n\$(upper_prompt)${CLEAR_STYLE}"
LOWER_LINE="\n❯ "
PROMPT_COMMAND='__git_ps1 "${UPPER_LINE}" "${LOWER_LINE}"'
