" ALE configuration
let g:ale_completion_enabled = 0

" ALE linters configuration
let g:ale_ruby_rubocop_executable = 'bundle'
let g:ale_sh_shellcheck_exclusions = 'SC1090,SC1091'
let g:ale_languagetool_options = '--autoDetect --level PICKY --mothertongue pt-BR '

let g:ale_linters = {
  \ 'go': ['gobuild'],
  \ 'ruby': ['rubocop', 'solargraph'],
  \ 'rust': ['analyzer', 'rustc'],
  \ 'sh': ['language_server', 'shell', 'shellcheck'],
  \ 'markdown': ['alex', 'languagetool'],
  \ 'text': ['alex', 'languagetool'],
  \ }
let g:ale_fixers = {
  \ '*': ['remove_trailing_lines', 'trim_whitespace'],
  \ 'go': ['gofmt'],
  \ 'rust': ['rustfmt'],
  \ 'terraform': ['terraform'],
  \ 'html': ['prettier'],
  \ 'json': ['prettier'],
  \ 'yaml': ['prettier'],
  \ }
let g:ale_completion_symbols = {
  \ 'text': '',
  \ 'method': '',
  \ 'function': '',
  \ 'constructor': '',
  \ 'field': '',
  \ 'variable': '',
  \ 'class': '',
  \ 'interface': '',
  \ 'module': '',
  \ 'property': '',
  \ 'unit': 'unit',
  \ 'value': 'val',
  \ 'enum': '',
  \ 'keyword': 'keyword',
  \ 'snippet': '',
  \ 'color': 'color',
  \ 'file': '',
  \ 'reference': 'ref',
  \ 'folder': '',
  \ 'enum member': '',
  \ 'constant': '',
  \ 'struct': '',
  \ 'event': 'event',
  \ 'operator': '',
  \ 'type_parameter': 'type param',
  \ '<default>': 'v'
  \ }

" vim-devicon configuration
let g:webdevicons_enable = 1

" tagbar configuration (to work with Snap universal-ctags)
let g:tagbar_use_cache = 0
let g:tagbar_autofocus = 1

" Plugin manager
so ~/.vim/plugins.vim

" Row numbers
set number
set numberwidth=5
set relativenumber
highlight LineNr cterm=NONE ctermbg=NONE ctermfg=grey

" Text columns
set textwidth=80
set colorcolumn=+1,+21,+41

" Splits are open in 'natural' reading direction (right then below)
set splitright
set splitbelow

" Scroll
set scrolloff=0

" Different cursor symbols for different modes
let &t_SI = "\<Esc>[6 q"
let &t_SR = "\<Esc>[4 q"
let &t_EI = "\<Esc>[2 q"

" Highlight cursor line
set cursorline
highlight CursorLine cterm=NONE ctermbg=lightcyan ctermfg=NONE
highlight CursorLineNR cterm=bold ctermbg=lightcyan ctermfg=darkblue

" Highlight and incremental search
if has("extra_search")
  set hlsearch
  set incsearch
endif
highlight Search cterm=NONE ctermbg=lightgreen ctermfg=NONE

" Search ignores case, unless specified
set ignorecase
set smartcase

" Assures that Backspace deletes indent, eol and start
set backspace=indent,eol,start

" Soft tabs (spaces instead of tab characters)
set tabstop=2
set shiftwidth=2
set shiftround
set expandtab

" Syntax
syntax on
syntax enable

" Syntax highlight for some specific filetypes
autocmd BufRead,BufNewFile *.rasi setlocal filetype=css
autocmd BufRead,BufNewFile *.tmuxtheme setlocal filetype=tmux

set nocompatible
filetype plugin indent on
set omnifunc=syntaxcomplete#Complete

" Clipboard (yank/paste from/to clipboard, if available)
if has("clipboard")
  set clipboard=unnamed
  if has("unnamedplus")
    set clipboard+=unnamedplus
  endif
endif

set guioptions+=a

" Persistent undo
if has('persistent_undo')
  set undodir=~/.vim/.undo//
  set undofile
endif

" Backup and swap files on ~/.vim folder
set backup
set backupdir=~/.vim/.backup//
set directory=~/.vim/.swap//

" Netrw

" No header (banner)
let g:netrw_banner = 0

" Open files in a vertical split
" let g:netrw_browse_split = 2
let g:netrw_altv = 1

" netrw tree mode
let g:netrw_liststyle = 3

" Show vim mode on last line
set noshowmode

" Statusbar/Tabline
set showtabline=2
set laststatus=2
set ruler

let g:lightline = {
  \ 'component_function': {
  \   'filename': 'LightlineFilename',
  \   'filetype': 'DeviconFiletype',
  \   'fileformat': 'DeviconFileformat',
  \ },
  \ }

function! LightlineFilename()
  return expand('%f')
endfunction

function! DeviconFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
endfunction

function! DeviconFileformat()
  return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
endfunction

" No vertical characters for separating windows
set fillchars+=vert:\ 

" Do not automatically insert comment leader after hitting o/O (normal mode)
autocmd FileType * setlocal formatoptions-=o

" Color schemes
if has('termguicolors')
  set termguicolors
endif

" lightline reloading
function ReloadLightline()
  call lightline#init()
  call lightline#colorscheme()
endfunction

" Seoul 256 Theme
function SetSeoul256LightScheme()
  " Enable italics for comments
  highlight Comment cterm=italic ctermbg=bg ctermfg=fg

  let g:seoul256_light_background = 254
  let g:seoul256_srgb = 1
  colorscheme seoul256-light
  let g:lightline.colorscheme = 'seoul256'

  if exists('*term_setansicolors')
    let g:terminal_ansi_colors = [
      \ '#4E4E4E', '#AF5F5F', '#5F885F', '#AF8760',
      \ '#5F87AE', '#875F87', '#5F8787', '#808080',
      \ '#3A3A3A', '#870100', '#005F00', '#D8865F',
      \ '#0087AF', '#87025F', '#008787', '#8A8A8A'
      \ ]
  endif

  call ReloadLightline()
endfunction

function SetSeoul256DarkScheme()
  let g:seoul256_background = 233
  let g:seoul256_srgb = 1
  colorscheme seoul256
  let g:lightline.colorscheme = 'seoul256'

  call ReloadLightline()
endfunction

" Challenger Deep Theme
function SetChallengerDeepScheme()
  colorscheme challenger_deep
  let g:lightline.colorscheme = 'challenger_deep'

  call ReloadLightline()
endfunction

" Nord Theme
function SetNordScheme()
  let g:nord_bold_vertical_split_line = 1
  let g:nord_cursor_line_number_background = 1
  let g:nord_uniform_diff_background = 1

  " Font tweaks
  let g:nord_bold = 1
  let g:nord_italic = 1
  let g:nord_italic_comments = 1
  let g:nord_underline = 1

  colorscheme nord
  let g:lightline.colorscheme = 'nord'

  call ReloadLightline()
endfunction

" Color scheme settings based on environment variables
if $SYSTEM_THEME ==? 'seoul256-light'
  call SetSeoul256LightScheme()
elseif $SYSTEM_THEME ==? 'seoul256-dark'
  call SetSeoul256DarkScheme()
elseif $SYSTEM_THEME ==? 'nord'
  call SetNordScheme()
else
  call SetChallengerDeepScheme()
endif

" Extra whitespace (configured after loading the theme, or it will be overriden)
set list listchars=tab:»\ ,eol:¬,trail:·,nbsp:·
" http://vim.wikia.com/wiki/Highlight_unwanted_spaces
highlight ExtraWhitespace cterm=bold ctermbg=red ctermfg=NONE
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

" Enable spell checking for some file types
autocmd Filetype gitcommit setlocal spell
autocmd Filetype markdown,mkd setlocal spell
autocmd Filetype text setlocal spell
autocmd Filetype wiki setlocal spell

let g:vimwiki_list = [{'path': '~/vimwiki/',
                      \ 'syntax': 'markdown', 'ext': '.md'}]

let g:codi#interpreters = {
  \'python': { 'bin': 'python3', 'prompt': '^\(>>>\|\.\.\.\) ' }
  \ }

" fzf layout
let g:fzf_layout = { 'down': '30%' }

" Disable preview on fzf
let g:fzf_preview_window = ''

" fzf colors that match the colorscheme
let g:fzf_colors = {
  \ 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment']
  \ }


" Change default ripgrep fzf integration (doesn't use fzf as fuzzy finder)
function! RipgrepFzf(query, fullscreen)
  let command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case -- %s || true'
  let initial_command = printf(command_fmt, shellescape(a:query))
  let reload_command = printf(command_fmt, '{q}')
  let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
  call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction

command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)

" markdown-preview configuration
let g:mkdp_filetypes = ['markdown', 'mermaid']

" vim-test configuration
let g:test#echo_command = 0
let g:test#preserve_screen = 1
let test#strategy = "vimux"
let test#ruby#rspec#executable = 'bundle exec rspec'
let test#ruby#rspec#options = {
  \ 'nearest': '--format progress',
  \ 'file':    '--format documentation',
  \ }

" Map leader
let mapleader = " "

" ALE mappings
nnoremap <leader>ad :ALEGoToDefinition -vsplit<cr>
nnoremap <leader>af :ALEFix<cr>
nnoremap <leader>ah :ALEHover<cr>
nnoremap <leader>ar :ALEFindReferences<cr>
imap <Nul> <Plug>(ale_complete)

" FZF mappings
nnoremap <leader>ff :Files<cr>
nnoremap <leader>fl :Lines<cr>
nnoremap <leader>gc :Commits<cr>
nnoremap <leader>gf :GFiles<cr>
nnoremap <leader>gu :GFiles?<cr>
nnoremap <leader>fb :Buffers<cr>
nnoremap <leader>/ :BLines<cr>
nnoremap <leader>fw :W<cr>
nnoremap <leader>rg :RG<cr>

" tagbar mappings
nnoremap <silent> <F8> :TagbarOpenAutoClose<CR>

" vim-fugitive mappings
nnoremap <leader>gb :Git blame<cr>
nnoremap <leader>gd :Gdiff<cr>
nnoremap <leader>gg :Git<cr>

" vim-rails mappings
nnoremap <leader>aa :A<cr>

" vim-test mappings
nnoremap <leader>tt :TestNearest<cr>
nnoremap <leader>tf :TestFile<cr>
nnoremap <leader>tl :TestLast<cr>
nnoremap <leader>tv :TestVisit<cr>

" vimux configuration
nnoremap <Leader>vz :VimuxZoomRunner<CR>

" custom mappings
nnoremap <leader>jb :%!python3 -m json.tool<cr>
nnoremap <leader>dff :windo diffthis<cr>
nnoremap <leader>dfo :diffoff<cr>
nnoremap <leader>ll :lopen<cr>
nnoremap <leader>lc :lclose<cr>
nnoremap <leader>ln :lnext<cr>
nnoremap <leader>lp :lprevious<cr>
nnoremap <leader>sf :syn sync fromstart<cr>
