set encoding=UTF-8

" ALE configuration
let g:ale_completion_enabled = 0

" ALE linters configuration
let g:ale_ruby_rubocop_executable = 'bundle'
let g:ale_sh_shellcheck_exclusions = 'SC1090,SC1091'
let g:ale_languagetool_options = '--autoDetect --level PICKY --mothertongue pt-BR '

let g:ale_linters = {
  \ 'go': ['gobuild'],
  \ 'ruby': ['rubocop', 'solargraph'],
  \ 'rust': ['analyzer', 'rustc'],
  \ 'sh': ['language_server', 'shell', 'shellcheck'],
  \ 'markdown': ['alex', 'languagetool'],
  \ 'text': ['alex', 'languagetool'],
  \ }
let g:ale_fixers = {
  \ '*': ['remove_trailing_lines', 'trim_whitespace'],
  \ 'go': ['gofmt'],
  \ 'rust': ['rustfmt'],
  \ 'terraform': ['terraform'],
  \ 'html': ['prettier'],
  \ 'json': ['prettier'],
  \ 'yaml': ['prettier'],
  \ }
let g:ale_completion_symbols = {
  \ 'text': '',
  \ 'method': '',
  \ 'function': '',
  \ 'constructor': '',
  \ 'field': '',
  \ 'variable': '',
  \ 'class': '',
  \ 'interface': '',
  \ 'module': '',
  \ 'property': '',
  \ 'unit': 'unit',
  \ 'value': 'val',
  \ 'enum': '',
  \ 'keyword': 'keyword',
  \ 'snippet': '',
  \ 'color': 'color',
  \ 'file': '',
  \ 'reference': 'ref',
  \ 'folder': '',
  \ 'enum member': '',
  \ 'constant': '',
  \ 'struct': '',
  \ 'event': 'event',
  \ 'operator': '',
  \ 'type_parameter': 'type param',
  \ '<default>': 'v',
  \ }

" vim-devicon configuration
let g:webdevicons_enable = 1

" tagbar configuration (to work with universal-ctags)
let g:tagbar_use_cache = 0
let g:tagbar_autofocus = 1

" vim git-gutter configuration
let g:gitgutter_set_sign_backgrounds = 1
let g:gitgutter_sign_added =                   "\uf457 " " nf-oct-diff_added
let g:gitgutter_sign_modified =                "\uf459 " " nf-oct-diff_modified
let g:gitgutter_sign_modified_removed =        "\uf440 " " nf-oct-diff
let g:gitgutter_sign_removed =                 "\uf458 " " nf-oct-diff_removed
let g:gitgutter_sign_removed_first_line =      "\uf458 " " nf-oct-diff_removed
let g:gitgutter_sign_removed_above_and_below = "\uf873 " " nf-mdi-minus

" Plugin manager
so ~/.vim/plugins.vim

" Set swap file updating time
set updatetime=500

" Row numbers
set number
set numberwidth=5
set relativenumber
highlight LineNr cterm=NONE ctermbg=NONE ctermfg=grey

" Text columns
set textwidth=80
set colorcolumn=+1,+21,+41

" Splits are open in 'natural' reading direction (right then below)
set splitright
set splitbelow

" Scroll
set scrolloff=0

" Different cursor symbols for different modes
let &t_SI = "\<Esc>[6 q"
let &t_SR = "\<Esc>[4 q"
let &t_EI = "\<Esc>[2 q"

" Highlight cursor line
set cursorline
highlight CursorLine cterm=NONE ctermbg=lightcyan ctermfg=NONE
highlight CursorLineNR cterm=bold ctermbg=lightcyan ctermfg=darkblue

" Highlight and incremental search
if has("extra_search")
  set hlsearch
  set incsearch
endif
highlight Search cterm=NONE ctermbg=lightgreen ctermfg=NONE

" Search ignores case, unless specified
set ignorecase
set smartcase

" Assures that Backspace deletes indent, eol and start
set backspace=indent,eol,start

" Soft tabs (spaces instead of tab characters)
set tabstop=2
set shiftwidth=2
set shiftround
set expandtab

" Syntax
syntax on
syntax enable

" Syntax highlight for some specific filetypes
autocmd BufRead,BufNewFile *.rasi setlocal filetype=css
autocmd BufRead,BufNewFile *.tmuxtheme setlocal filetype=tmux
autocmd BufRead,BufNewFile *.tmux.conf setlocal filetype=tmux

set nocompatible
filetype plugin indent on
set omnifunc=syntaxcomplete#Complete

" Clipboard (yank/paste from/to clipboard, if available)
if has("clipboard")
  set clipboard=unnamed
  if has("unnamedplus")
    set clipboard+=unnamedplus
  endif
endif

set guioptions+=a

" Persistent undo
if has('persistent_undo')
  set undodir=~/.vim/.undo//
  set undofile
endif

" Backup and swap files on ~/.vim folder
set backup
set backupdir=~/.vim/.backup//
set directory=~/.vim/.swap//

" Netrw

" No header (banner)
let g:netrw_banner = 0

" Open files in a vertical split
" let g:netrw_browse_split = 2
let g:netrw_altv = 1

" netrw tree mode
let g:netrw_liststyle = 3

" Show vim mode on last line
set noshowmode

" Statusbar/Tabline
set showtabline=2
set laststatus=2
set ruler

" Lightline configuration
let g:lightline = {
  \ 'active': {
  \   'left': [
  \     [ 'mode', 'paste' ],
  \     [ 'gitbranch' ],
  \     [ 'filename', 'modified' ],
  \   ],
  \   'right': [
  \     [ 'lineinfo' ],
  \     [ 'percent'],
  \     [ 'charvaluehex' ],
  \     [ 'synstack' ],
  \   ],
  \ },
  \ 'tabline': {
  \   'left': [ [ 'tabs' ] ],
  \   'right': [ [ 'fileformat', 'fileencoding', 'filetype' ], [ 'readonly' ] ]
  \ },
  \ 'tab': {
  \   'active': [ 'tabnum', 'filename', 'modified' ],
  \   'inactive': [ 'tabnum', 'filename', 'modified' ]
  \ },
  \ 'component': {
  \   'charvaluehex': '0x%02B',
  \   'percent': "\uf8ef %P",
  \   'lineinfo': "\uf911%3l:%-3v",
  \ },
  \ 'component_function': {
  \   'filename': 'DeviconFilename',
  \   'filetype': 'DeviconFiletype',
  \   'gitbranch': 'DeviconGitBranch',
  \   'synstack': 'SynStack',
  \ },
  \ }
let g:lightline.separator             = { 'left': "\ue0b8", 'right': "\ue0ba" }
let g:lightline.subseparator          = { 'left': "\ue0b9", 'right': "\ue0bb" }
let g:lightline.tabline_separator     = { 'left': "\ue0bc", 'right': "\ue0be" }
let g:lightline.tabline_subseparator  = { 'left': "\ue0bb", 'right': "\ue0bb" }

function! DeviconFiletype()
  return winwidth(0) > 70 ? (
    \ strlen(&filetype) ?
    \ &filetype . ' ' . WebDevIconsGetFileTypeSymbol() :
    \ 'no ft'
    \ ) : ''
endfunction

function! DeviconGitBranch()
  let s:devicon_git_branch = FugitiveHead()
  return strlen(s:devicon_git_branch) ?
    \ "\uf126 " . s:devicon_git_branch :
    \ "\uf755 " . expand('%:p:h:t')
endfunction

function! DeviconFilename()
  let s:devicon_filename = expand('%:f')
  return strlen(s:devicon_filename) ? "\uf4a5 " . s:devicon_filename : ''
endfunction

function! SynStack()
  if exists("*synstack")
    let s:highlights = map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
    " nf-fa-i_cursor
    return "\uf246 " . (len(s:highlights) ? s:highlights[-1] : "--")
  endif
endfunc

" No vertical characters for separating windows
set fillchars+=vert:│

" Do not automatically insert comment leader after hitting o/O (normal mode)
autocmd FileType * setlocal formatoptions-=o

" lightline reloading
function ReloadLightline()
  call lightline#init()
  call lightline#colorscheme()
endfunction

" Seoul 256 Theme
function SetSeoul256LightScheme()
  let g:seoul256_light_background = 252
  let g:seoul256_srgb = 1
  colorscheme seoul256-light

  if exists('*term_setansicolors')
    let g:terminal_ansi_colors = [
      \ '#4E4E4E', '#AF5F5F', '#5F885F', '#AF8760',
      \ '#5F87AE', '#875F87', '#5F8787', '#808080',
      \ '#3A3A3A', '#870100', '#005F00', '#D8865F',
      \ '#0087AF', '#87025F', '#008787', '#8A8A8A',
      \ ]
  endif

  let s:fg =     [ '#4E4E4E', 239 ]
  let s:bg =     [ '#D0D0D0', 252 ]
  let s:gray1 =  [ '#A8A8A8', 248 ]
  let s:gray2 =  [ '#BCBCBC', 250 ]
  let s:gray3 =  [ '#6C6C6C', 242 ]
  let s:gray4 =  [ '#949494', 246 ]

  let s:red =     [ '#AF5F5F', 1 ]
  let s:green =   [ '#5F885F', 2 ]
  let s:yellow =  [ '#AF8760', 3 ]
  let s:blue =    [ '#5F87AE', 4 ]
  let s:magenta = [ '#875F87', 5 ]

  let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}

  " Normal mode
  let s:p.normal.left =    [ [ s:bg, s:blue, 'bold' ], [ s:fg, s:gray1 ] ]
  let s:p.normal.middle =  [ [ s:fg, s:gray2 ] ]
  let s:p.normal.right =   [ [ s:bg, s:blue, 'bold' ], [ s:fg, s:gray1 ] ]
  let s:p.normal.error =   [ [ s:red, s:fg ] ]
  let s:p.normal.warning = [ [ s:yellow, s:fg ] ]

  " Insert mode
  let s:p.insert.left =  [ [ s:bg, s:green, 'bold' ], [ s:green, s:gray1 ], [ s:green, s:gray2 ] ]
  let s:p.insert.right = [ [ s:bg, s:green, 'bold' ], [ s:green, s:gray1 ], [ s:green, s:gray2 ] ]

  " Replace mode
  let s:p.replace.left =  [ [ s:bg, s:red, 'bold' ], [ s:red, s:gray1 ], [ s:red, s:gray2 ] ]
  let s:p.replace.right = [ [ s:bg, s:red, 'bold' ], [ s:red, s:gray1 ], [ s:red, s:gray2 ] ]

  " Visual mode
  let s:p.visual.left =  [ [ s:bg, s:magenta, 'bold' ], [ s:magenta, s:gray1 ], [ s:magenta, s:gray2 ] ]
  let s:p.visual.right = [ [ s:bg, s:magenta, 'bold' ], [ s:magenta, s:gray1 ], [ s:magenta, s:gray2 ] ]

  " Tabline
  let s:p.tabline.left =   [ [ s:fg, s:gray1 ] ]
  let s:p.tabline.tabsel = [ [ s:bg, s:green, 'bold' ] ]
  let s:p.tabline.middle = copy(s:p.normal.middle)
  let s:p.tabline.right =  [ [ s:fg, s:gray1 ] ]

  " Inactive windows (statusline)
  let s:p.inactive.left =   [ [ s:gray1, s:gray3 ], [ s:gray3, s:gray4 ] ]
  let s:p.inactive.middle = [ [ s:gray3, s:gray1 ] ]
  let s:p.inactive.right =  copy(s:p.inactive.left)

  " Load color palette
  let g:lightline#colorscheme#seoul256light#palette = lightline#colorscheme#flatten(s:p)
  let g:lightline.colorscheme = 'seoul256light'

  " Clear statusline colors set by seoul256 colorscheme
  highlight StatusLine cterm=bold ctermfg=239 ctermbg=248 gui=bold,reverse guifg=#4E4E4E guibg=#A8A8A8

  call ReloadLightline()
endfunction

function SetSeoul256DarkScheme()
  let g:seoul256_background = 233
  let g:seoul256_srgb = 1
  colorscheme seoul256
  let g:lightline.colorscheme = 'seoul256'

  call ReloadLightline()
endfunction

" Challenger Deep Theme
function SetChallengerDeepScheme()
  colorscheme challenger_deep
  let g:lightline.colorscheme = 'challenger_deep'

  if exists('*term_setansicolors')
    let g:terminal_ansi_colors = [
      \ '#565575', '#FF8080', '#95FFA4', '#FFE9AA',
      \ '#91DDFF', '#C991E1', '#AAFFE4', '#CBE3E7',
      \ '#100E23', '#FF5458', '#62D196', '#FFB378',
      \ '#65B2FF', '#906CFF', '#63F2F1', '#A6B3CC',
      \ ]
  endif

  call ReloadLightline()
endfunction

" Nord Theme
function SetNordScheme()
  let g:nord_bold_vertical_split_line = 1
  let g:nord_cursor_line_number_background = 1
  let g:nord_uniform_diff_background = 1

  " Font tweaks
  let g:nord_bold = 1
  let g:nord_italic = 1
  let g:nord_italic_comments = 1
  let g:nord_underline = 1

  colorscheme nord
  let g:lightline.colorscheme = 'nord'

  call ReloadLightline()
endfunction

" Space Vim Light Theme
function SetSpaceVimLightScheme()
  set background=light

  colorscheme space_vim_theme

  " Font tweaks
  hi Comment cterm=italic ctermfg=146 guifg=#A8A8BF

  let s:fg1 =     [ '#504259', 60 ]
  let s:fg2 =     [ '#6C3163', 89 ]
  let s:purple1 = [ '#E7E5EB', 189 ]
  let s:purple2 = [ '#D3D3E7', 146 ]
  let s:purple3 = [ '#C3C3DB', 242 ]

  let s:red =      [ '#D26487', 168 ]
  let s:orange =   [ '#CA754B', 172 ]
  let s:blue =     [ '#6981C5', 69 ]
  let s:yellow =   [ '#B89F33', 136 ]
  let s:magenta =  [ '#D194CC', 176 ]
  let s:white =    [ '#FBF8EF', 231 ]

  let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {}}

  " Normal mode
  let s:p.normal.left =    [ [ s:fg1, s:magenta, 'bold' ], [ s:fg2, s:purple1, 'bold' ] ]
  let s:p.normal.middle =  [ [ s:fg1, s:purple2 ] ]
  let s:p.normal.right =   [ [ s:fg1, s:magenta ], [ s:fg2, s:purple1 ] ]
  let s:p.normal.error =   [ [ s:red, s:fg1 ] ]
  let s:p.normal.warning = [ [ s:yellow, s:fg1 ] ]

  " Insert mode
  let s:p.insert.left =  [ [ s:white, s:blue, 'bold' ], [ s:blue, s:purple1, 'bold'  ], [ s:blue, s:purple2 ] ]
  let s:p.insert.right = [ [ s:white, s:blue, 'bold' ], [ s:blue, s:purple1, 'bold'  ], [ s:blue, s:purple2 ] ]

  " Replace mode
  let s:p.replace.left =  [ [ s:white, s:red, 'bold' ], [ s:red, s:purple1, 'bold' ], [ s:red, s:purple2 ] ]
  let s:p.replace.right = [ [ s:white, s:red, 'bold' ], [ s:red, s:purple1, 'bold' ], [ s:red, s:purple2 ] ]

  " Visual mode
  let s:p.visual.left =  [ [ s:white, s:orange, 'bold' ], [ s:orange, s:purple1, 'bold' ], [ s:orange, s:purple2 ] ]
  let s:p.visual.right = [ [ s:white, s:orange, 'bold' ], [ s:orange, s:purple1, 'bold' ], [ s:orange, s:purple2 ] ]

  " Tabline
  let s:p.tabline.left =   [ [ s:fg1, s:purple2 ] ]
  let s:p.tabline.tabsel = [ [ s:fg2, s:purple1, 'bold' ] ]
  let s:p.tabline.middle = copy(s:p.normal.middle)
  let s:p.tabline.right =  [ [ s:fg2, s:purple1 ] ]

  " Inactive windows (statusline)
  let s:p.inactive.left =   [ [ s:white, s:purple3 ], [ s:white, s:purple2 ] ]
  let s:p.inactive.middle = [ [ s:purple3, s:purple1 ] ]
  let s:p.inactive.right =  copy(s:p.inactive.left)

  " Load color palette
  let g:lightline#colorscheme#spacevimlight#palette = lightline#colorscheme#flatten(s:p)
  let g:lightline.colorscheme = 'spacevimlight'

  call ReloadLightline()
endfunction

" Color scheme settings based on environment variables
if $SYSTEM_THEME ==? 'seoul256-light'
  call SetSeoul256LightScheme()
  highlight Comment cterm=italic ctermbg=bg ctermfg=fg
elseif $SYSTEM_THEME ==? 'seoul256-dark'
  call SetSeoul256DarkScheme()
  highlight Comment cterm=italic ctermbg=bg ctermfg=fg
elseif $SYSTEM_THEME ==? 'nord'
  call SetNordScheme()
elseif $SYSTEM_THEME ==? 'challenger-deep'
  call SetChallengerDeepScheme()
  highlight Comment cterm=italic ctermbg=bg ctermfg=fg
else
  call SetSpaceVimLightScheme()
endif

" Color schemes
if has('termguicolors')
  set termguicolors
endif

" Extra whitespace (configured after loading the theme, or it will be overriden)
set list listchars=tab:»\ ,lead:·,eol:¬,trail:·,nbsp:·

" http://vim.wikia.com/wiki/Highlight_unwanted_spaces
highlight ExtraWhitespace cterm=bold ctermbg=red ctermfg=NONE
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

" Enable spell checking for some file types
autocmd Filetype gitcommit setlocal spell
autocmd Filetype markdown,mkd setlocal spell
autocmd Filetype text setlocal spell
autocmd Filetype wiki setlocal spell

let g:vimwiki_list = [{'path': '~/vimwiki/',
                     \ 'syntax': 'markdown', 'ext': '.md'}]

let g:codi#interpreters = {
  \'python': { 'bin': 'python3', 'prompt': '^\(>>>\|\.\.\.\) ' }
  \ }

" fzf layout
let g:fzf_layout = { 'down': '30%' }

" Disable preview on fzf
let g:fzf_preview_window = ''

" fzf colors that match the colorscheme
let g:fzf_colors = {
  \ 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment']
  \ }


" Change default ripgrep fzf integration (doesn't use fzf as fuzzy finder)
function! RipgrepFzf(query, fullscreen)
  let command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case -- %s || true'
  let initial_command = printf(command_fmt, shellescape(a:query))
  let reload_command = printf(command_fmt, '{q}')
  let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
  call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction

command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)

" markdown-preview configuration
let g:mkdp_filetypes = ['markdown', 'mermaid']

" vim-test configuration
let g:test#echo_command = 0
let g:test#preserve_screen = 1
let test#strategy = "vimux"
let test#ruby#rspec#executable = 'bundle exec rspec'
let test#ruby#rspec#options = {
  \ 'nearest': '--format progress',
  \ 'file':    '--format documentation',
  \ }

" Map leader
let mapleader = " "

" ALE mappings
nnoremap <leader>ad :ALEGoToDefinition -vsplit<cr>
nnoremap <leader>af :ALEFix<cr>
nnoremap <leader>ah :ALEHover<cr>
nnoremap <leader>ar :ALEFindReferences<cr>
imap <Nul> <Plug>(ale_complete)

" FZF mappings
nnoremap <leader>ff :Files<cr>
nnoremap <leader>fl :Lines<cr>
nnoremap <leader>gc :Commits<cr>
nnoremap <leader>gf :GFiles<cr>
nnoremap <leader>gu :GFiles?<cr>
nnoremap <leader>fb :Buffers<cr>
nnoremap <leader>fw :W<cr>
nnoremap <leader>rg :RG<cr>
nnoremap <leader>/  :BLines<cr>

" NERDTree mappings
nnoremap <C-t> :NERDTreeToggle<CR>

" tagbar mappings
nnoremap <leader>; :TagbarOpenAutoClose<CR>

" vim-fugitive mappings
nnoremap <leader>gb :Git blame<cr>
nnoremap <leader>gd :Gdiff<cr>
nnoremap <leader>gg :Git<cr>

" vim-rails mappings
nnoremap <leader>ra :A<cr>

" vim-test mappings
nnoremap <leader>tt :TestNearest<cr>
nnoremap <leader>tf :TestFile<cr>
nnoremap <leader>tl :TestLast<cr>
nnoremap <leader>tv :TestVisit<cr>

" vimux configuration
nnoremap <Leader>vz :VimuxZoomRunner<CR>

" custom mappings
nnoremap <leader>dff :windo diffthis<cr>
nnoremap <leader>dfo :diffoff<cr>
nnoremap <leader>jb  :%!python3 -m json.tool<cr>
nnoremap <leader>ll  :lopen<cr>
nnoremap <leader>lc  :lclose<cr>
nnoremap <leader>ln  :lnext<cr>
nnoremap <leader>lp  :lprevious<cr>
nnoremap <leader>sf  :syn sync fromstart<cr>
