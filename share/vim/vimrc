set encoding=UTF-8

" ALE configuration
let g:ale_completion_enabled = 1
let g:ale_hover_cursor = 1
let g:ale_hover_to_floating_preview = 1

" ALE linters configuration
let g:ale_ruby_rubocop_executable = 'bundle'
let g:ale_sh_shellcheck_exclusions = 'SC1090,SC1091'
let g:ale_cspell_options = '--gitignore'
let g:ale_languagetool_options = '--autoDetect --level PICKY --mothertongue pt-BR '

let g:ale_linters = {
  \ 'go': ['gobuild'],
  \ 'ruby': ['rubocop', 'solargraph', 'cspell'],
  \ 'rust': ['analyzer', 'rustc'],
  \ 'sh': ['language_server', 'shell', 'shellcheck'],
  \ 'markdown': ['alex', 'languagetool'],
  \ 'text': ['alex', 'languagetool'],
  \ }
let g:ale_fixers = {
  \ '*': ['remove_trailing_lines', 'trim_whitespace'],
  \ 'go': ['gofmt'],
  \ 'rust': ['rustfmt'],
  \ 'terraform': ['terraform'],
  \ 'html': ['prettier'],
  \ 'json': ['prettier'],
  \ 'yaml': ['prettier'],
  \ }
let g:ale_completion_symbols = {
  \ 'text': '',
  \ 'method': '',
  \ 'function': '',
  \ 'constructor': '',
  \ 'field': '',
  \ 'variable': '',
  \ 'class': '',
  \ 'interface': '',
  \ 'module': '',
  \ 'property': '',
  \ 'unit': 'unit',
  \ 'value': 'val',
  \ 'enum': '',
  \ 'keyword': 'keyword',
  \ 'snippet': '',
  \ 'color': 'color',
  \ 'file': '',
  \ 'reference': 'ref',
  \ 'folder': '',
  \ 'enum member': '',
  \ 'constant': '',
  \ 'struct': '',
  \ 'event': 'event',
  \ 'operator': '',
  \ 'type_parameter': 'type param',
  \ '<default>': 'v',
  \ }

" vim-devicon configuration
let g:webdevicons_enable = 1

" tagbar configuration (to work with universal-ctags)
let g:tagbar_use_cache = 0
let g:tagbar_autofocus = 1

" vim-signify configuration
let g:signify_sign_add               = "\uf914"
let g:signify_sign_delete            = "\uf873"
let g:signify_sign_delete_first_line = "\uf873"
let g:signify_sign_change            = "\ufc23"
let g:signify_sign_change_delete     = g:signify_sign_change . g:signify_sign_delete_first_line

" vim-signify doesn't show count on sign column
let g:signify_sign_show_count = 0

" vimux configuration
let g:VimuxUseNearest = 1

" Plugin manager
so ~/.vim/plugins.vim

" Set swap file updating time
set updatetime=100

" Inidicates a fast terminal connection
set ttyfast

" Row numbers
set number
set numberwidth=5
set relativenumber

" Text columns
set textwidth=80
set colorcolumn=+1,+21,+41

" Splits are open in 'natural' reading direction (right then below)
set splitright
set splitbelow

" Scroll
set scrolloff=0

" Non text, special characters, and disable line wrapping
set list listchars=tab:»\ ,lead:·,eol:¬,trail:·,nbsp:·,extends:↪,precedes:↩
set nowrap

" set showbreak=↪\
" set wrap

" No vertical characters for separating windows
set fillchars+=vert:│

" Different cursor symbols for different modes
let &t_SI = "\<Esc>[6 q"
let &t_SR = "\<Esc>[4 q"
let &t_EI = "\<Esc>[2 q"

" Force italics rendering
let &t_ZH = "\<Esc>[3m"

" Automatically redraw
autocmd FocusGained * redraw!

" Highlight cursor line
set cursorline

" Highlight and incremental search
if has("extra_search")
  set hlsearch
  set incsearch
endif

" Search ignores case, unless specified, sane regex typing
set ignorecase
set smartcase
set magic

" Assures that Backspace deletes indent, eol and start
set backspace=indent,eol,start

" Soft tabs (spaces instead of tab characters)
set tabstop=2
set shiftwidth=2
set shiftround
set expandtab

" Syntax
syntax on
syntax enable

" Syntax highlight for some specific filetypes
autocmd BufRead,BufNewFile *.rasi setlocal filetype=css
autocmd BufRead,BufNewFile *.tmuxtheme setlocal filetype=tmux
autocmd BufRead,BufNewFile *.tmux.conf setlocal filetype=tmux

set nocompatible
filetype plugin indent on
set omnifunc=syntaxcomplete#Complete

" Clipboard (yank/paste from/to clipboard, if available)
if has("clipboard")
  set clipboard=unnamed
  if has("unnamedplus")
    set clipboard+=unnamedplus
  endif
endif

set guioptions+=a

" Persistent undo
if has('persistent_undo')
  set undodir=~/.vim/.undo//
  set undofile
endif

" Backup and swap files on ~/.vim folder
set backup
set backupdir=~/.vim/.backup//
set directory=~/.vim/.swap//

" Netrw

" No header (banner)
let g:netrw_banner = 0

" Open files in a vertical split
" let g:netrw_browse_split = 2
let g:netrw_altv = 1

" netrw tree mode
let g:netrw_liststyle = 3

" Show vim mode on last line
set noshowmode

" Statusbar/Tabline
set showtabline=2
set laststatus=2
set ruler

" lightline bufferline
let g:lightline#bufferline#show_number = 1
let g:lightline#bufferline#number_separator = ':'
let g:lightline#bufferline#enable_devicons = 1
let g:lightline#bufferline#icon_position = 'first'

" Lightline configuration
let g:lightline = {
  \ 'active': {
  \   'left': [
  \     [ 'mode', 'paste' ],
  \     [ 'gitbranch' ],
  \     [ 'filename', 'modified' ],
  \   ],
  \   'right': [
  \     [ 'lineinfo' ],
  \     [ 'percent'],
  \     [ 'charvaluehex' ],
  \     [ 'synstack' ],
  \   ],
  \ },
  \ 'tabline': {
  \   'left': [ [ 'buffers' ] ],
  \   'right': [ [ 'filetype' ], [ 'fileformat', 'fileencoding' ], [ 'readonly' ] ]
  \ },
  \ 'tab': {
  \   'active': [ 'tabnum', 'filename', 'modified' ],
  \   'inactive': [ 'tabnum', 'filename', 'modified' ]
  \ },
  \ 'component': {
  \   'charvaluehex': "\uf246  0x%02B",
  \   'percent': "\uf8ef %P",
  \   'lineinfo': "\ufad6 %3l:%-3v",
  \ },
  \ 'component_expand': {
  \   'buffers': 'lightline#bufferline#buffers'
  \ },
  \ 'component_function': {
  \   'filename': 'DeviconFilename',
  \   'filetype': 'DeviconFiletype',
  \   'gitbranch': 'DeviconGitBranch',
  \   'synstack': 'SynStack',
  \ },
  \ 'component_type': {
  \   'buffers': 'tabsel'
  \ },
  \ }

" Powerline seaparators
let g:lightline.separator             = { 'left': "\ue0b0", 'right': "\ue0b2" }
let g:lightline.subseparator          = { 'left': "\ue0b1", 'right': "\ue0b3" }
let g:lightline.tabline_separator     = { 'left': "\ue0b0", 'right': "\ue0b2" }
let g:lightline.tabline_subseparator  = { 'left': "\ue0b1", 'right': "\ue0b3" }

function! DeviconFiletype()
  return winwidth(0) > 70 ? (
    \ strlen(&filetype) ?
    \ &filetype . ' ' . WebDevIconsGetFileTypeSymbol() :
    \ 'no ft'
    \ ) : ''
endfunction

function! DeviconGitBranch()
  let devicon_git_branch = FugitiveHead()
  return strlen(devicon_git_branch) ?
    \ "\uf126 " . devicon_git_branch :
    \ "\uf755 " . expand('%:p:h:t')
endfunction

function! DeviconFilename()
  let devicon_filename = expand('%:f')
  return strlen(devicon_filename) ? "\uf4a5 " . devicon_filename : ''
endfunction

function! SynStack()
  if exists("*synstack")
    let highlights = map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
    return (len(highlights) ? highlights[-1] : "--")
  endif
endfunc

" Color schemes
if has('termguicolors')
  set termguicolors
endif

" lightline reloading
function ReloadLightline()
  call lightline#init()
  call lightline#colorscheme()
endfunction

" Nord Theme
function SetNordScheme()
  set background=dark

  let g:nord_bold_vertical_split_line = 1
  let g:nord_cursor_line_number_background = 1
  let g:nord_uniform_diff_background = 1

  " Font tweaks
  let g:nord_bold = 1
  let g:nord_italic = 1
  let g:nord_italic_comments = 1
  let g:nord_underline = 1

  colorscheme nord
  let g:lightline.colorscheme = 'nord'

  call ReloadLightline()
endfunction

" Gruvbox Material Light Theme
function SetGruvboxMaterialLight()
  set background=light

  let g:gruvbox_material_palette = 'material'
  let g:gruvbox_material_background = 'hard'
  let g:gruvbox_material_current_word = 'grey background'
  let g:gruvbox_material_diagnostic_text_highlight = 1

  " Font tweaks
  let g:gruvbox_material_enable_bold = 1
  let g:gruvbox_material_enable_italic = 1
  let g:gruvbox_material_show_eob = 0

  colorscheme gruvbox-material
  let g:lightline.colorscheme = 'gruvbox_material'

  call ReloadLightline()
endfunction

" Edge Light Theme
function SetEdgeLight()
  set background=light

  let g:edge_style = 'edge'
  let g:edge_enable_italic = 1
  let g:edge_show_eob = 0

  colorscheme edge
  let g:lightline.colorscheme = 'edge'

  call ReloadLightline()
endfunction

" Dracula Theme
function SetDraculaTheme()
  set background=dark

  colorscheme dracula
  let g:lightline.colorscheme = 'dracula'

  call ReloadLightline()
endfunction

" Color scheme settings based on environment variables
if $SYSTEM_THEME ==? 'nord'
  call SetNordScheme()
elseif $SYSTEM_THEME ==? 'gruvbox-material-light'
  call SetGruvboxMaterialLight()
elseif $SYSTEM_THEME ==? 'edge-light'
  call SetEdgeLight()
elseif $SYSTEM_THEME ==? 'dracula'
  call SetDraculaTheme()
else
  highlight LineNr cterm=NONE ctermbg=NONE ctermfg=grey
  highlight CursorLine cterm=NONE ctermbg=lightcyan ctermfg=NONE
  highlight CursorLineNR cterm=bold ctermbg=lightcyan ctermfg=darkblue
  highlight Search cterm=NONE ctermbg=lightgreen ctermfg=NONE
endif

" fzf colors that match the colorscheme
let g:fzf_colors = {
  \ 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment']
  \ }

" Do not automatically insert comment leader after hitting o/O (normal mode)
autocmd FileType * setlocal formatoptions-=o

" Extra whitespace (configured after loading the theme, or it will be overriden)
" http://vim.wikia.com/wiki/Highlight_unwanted_spaces
highlight ExtraWhitespace cterm=bold ctermbg=red ctermfg=NONE
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

" Paint SpecialKey characters like NonText ones
highlight clear SpecialKey
highlight link SpecialKey NonText

" Enable spell checking for some file types
autocmd Filetype gitcommit setlocal spell
autocmd Filetype markdown,mkd setlocal spell
autocmd Filetype text setlocal spell
autocmd Filetype wiki setlocal spell

" Enable Limelight when using Goyo
autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!

" vimwiki configuration (disable on markdown files by default)
let g:vimwiki_list = [{'path': '~/vimwiki/', 'syntax': 'markdown', 'ext': '.md'}]
let g:vimwiki_global_ext = 0
let g:vimwiki_filetypes = ['wiki']

" previm configuration
let g:previm_enable_realtime = 1

let g:codi#interpreters = {
  \'python': { 'bin': 'python3', 'prompt': '^\(>>>\|\.\.\.\) ' }
  \ }

" fzf layout
let g:fzf_layout = { 'down': '30%' }

" Disable preview on fzf
let g:fzf_preview_window = ''

" Change default ripgrep fzf integration (doesn't use fzf as fuzzy finder)
function! RipgrepFzf(query, fullscreen)
  let command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case -- %s || true'
  let initial_command = printf(command_fmt, shellescape(a:query))
  let reload_command = printf(command_fmt, '{q}')
  let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
  call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction

command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)

" vim-test configuration
let g:test#echo_command = 0
let g:test#preserve_screen = 1
let test#strategy = "vimux"
let test#ruby#rspec#executable = 'bundle exec rspec'
let test#ruby#rspec#options = {
  \ 'nearest': '--format progress',
  \ 'file':    '--format documentation',
  \ }

" Map leader
let mapleader = " "

" ALE mappings
nnoremap <leader>ad :ALEGoToDefinition -vsplit<cr>
nnoremap <leader>af :ALEFix<cr>
nnoremap <leader>ah :ALEHover<cr>
nnoremap <leader>ar :ALEFindReferences<cr>
imap <Nul> <Plug>(ale_complete)

" FZF mappings
nnoremap <leader>ff :Files<cr>
nnoremap <leader>fl :Lines<cr>
nnoremap <leader>gc :Commits<cr>
nnoremap <leader>gf :GFiles<cr>
nnoremap <leader>gu :GFiles?<cr>
nnoremap <leader>b :Buffers<cr>
nnoremap <leader>w :W<cr>
nnoremap <leader>rg :RG<cr>
nnoremap <leader>/  :BLines<cr>

" NERDTree mappings
nnoremap <C-t> :NERDTreeToggle<cr>

" tagbar mappings
nnoremap <leader>; :TagbarOpenAutoClose<cr>

" vim-fugitive mappings
nnoremap <leader>gb :Git blame<cr>
nnoremap <leader>gd :Gdiff<cr>
nnoremap <leader>gg :Git<cr>

" vim-signify mappings
nnoremap <leader>gh :SignifyHunkDiff<cr>

" vim-rails mappings
nnoremap <leader>ra :AV<cr>

" vim-test mappings
nnoremap <silent><leader>ta :TestSuite<cr>
nnoremap <silent><leader>tt :TestNearest<cr>
nnoremap <silent><leader>tf :TestFile<cr>
nnoremap <silent><leader>tl :TestLast<cr>
nnoremap <silent><leader>tv :TestVisit<cr>

" vimux mappings
nnoremap <Leader>vz :VimuxZoomRunner<cr>

" Goyo mappings
nnoremap <Leader>jg :Goyo<cr>

" custom mappings
nnoremap <leader>dff :windo diffthis<cr>
nnoremap <leader>dfo :diffoff<cr>
nnoremap <leader>jb  :%!python3 -m json.tool<cr>
nnoremap <leader>ll  :lopen<cr>
nnoremap <leader>lc  :lclose<cr>
nnoremap <leader>ln  :lnext<cr>
nnoremap <leader>lp  :lprevious<cr>
nnoremap <leader>sf  :syn sync fromstart<cr>
